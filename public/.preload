trace("Initializing OPCUA")
local ua = require("opcua.api")
local init = require("opcua.init")

local checkConfig = require("opcua.config")
local sock = require("socket")
local gettime=os.time

local function getHostName()
  local hostname
  if os.execute() then
    local f = _G.io.popen("hostname")
    hostname = f:read("*a")
  else
    local sock = sock.connect("google.com", 80)
    hostname = sock:peername()
  end

  hostname = string.gsub(hostname, "[\n\r]", "")
  return hostname
end

local function getDefaultCert(fileName)
  trace("Use embedded OPCUA certificates")
  local keyPath = "."..fileName..".key"
  local certPath = "."..fileName..".pem"
  return certPath, keyPath, _ENV.app.io
end

local function writeFile(fio, fileName, data)
  local f, err = fio:open(fileName, "w")
  if err then
    trace(string.format("Failed to create file '%s': "..err))
    return false
  end

  local result = f:write(data)
  if not result then
    trace(string.format("Failed to save file '%s'." , fileName))
    return getDefaultCert(fileName)
  end

  f:close()

  return true
end

local function genOPCUACert(genFunc, hostname, applicationUri, fileName)
  local hio = ba.openio("home")
  if not hio then
    trace("Cannot open homeio")
    return getDefaultCert(fileName)
  end

  if not hio:stat("cert") and not hio:mkdir("cert") then
    trace("Cannot create directory "..hio:realpath("cert"))
    return getDefaultCert(fileName)
  end

  local cio = ba.mkio(hio, "cert")
  local keyName = fileName..".key"
  local certName = fileName..".pem"
  local keyHandle = cio:open(keyName)
  local certHandle = cio:open(certName)
  if not keyHandle or not certHandle then
    local cert, key = genFunc(hostname, applicationUri)
    if not writeFile(cio, certName, cert) then
      return getDefaultCert(fileName)
    end
    if not writeFile(cio, keyName, key)then
      return getDefaultCert(fileName)
    end
  end

  return cio:realpath(certName), cio:realpath(keyName)
end

-- Connect logging traces
-- Logging level is controlled by config file.
ua.trace.dbg = function(msg)
  tracep(false, 10, msg)
end

ua.trace.inf = function(msg)
  tracep(false, 9, msg)
end

ua.trace.err = function(msg)
  tracep(false, 0, msg)
end

local hostname = getHostName()

trace("Create OPCUA client")
-- Load and check client configuration file
local clientConfig = _ENV.app.io:dofile(".opcua_client_config", _ENV)
local certPath, keyPath, certIo = genOPCUACert(init.genClientCertificate, hostname, clientConfig.applicationUri, "opcua_client")
clientConfig.certificate = certPath
clientConfig.key = keyPath
clientConfig.io = certIo

checkConfig.client(clientConfig)
_G.clientConfig = clientConfig

trace("Start OPCUA server")
local serverConfig = require("loadconf").opc
if not serverConfig then
  serverConfig = _ENV.app.io:dofile(".opcua_server_config", _ENV)
end

local certPath, keyPath, certIo = genOPCUACert(init.genServerCertificate, hostname, serverConfig.applicationUri, "opcua_server")
serverConfig.httpDirName = "opcua"

-- Insert HTTP endpoints
table.insert(serverConfig.endpoints,
{
  -- endpoint URL will be sent to clients.
  endpointUrl = string.format("http://localhost:%d/opcua/", mako.port)
})

table.insert(serverConfig.endpoints,
{
  -- endpoint URL will be sent to clients.
  endpointUrl = string.format("http://localhost:%d/opcua/", mako.sslport)
})

serverConfig.certificate = certPath
serverConfig.key = keyPath
serverConfig.io = certIo
checkConfig.server(serverConfig)

local ok
ok, uaServer = pcall(ua.newServer, serverConfig)
if not ok then
   trace("Error: server too old for OPCUA example: "..uaServer)
   return
end

local function demoAddon(services)
  local objects = "i=40"
  io:dofile(".add_variables.lua")(services, objects)
end

uaServer:initialize(demoAddon)
uaServer:run()

function onunload()
  trace("Stopping OPC-UA server")
  uaServer:shutdown()
end

_G.uaServices = uaServer.services

trace("OPCUA ready")
