tracep(false, 5, "Initializing OPCUA")

local ua = require("opcua.api")
ua.assertVersion("0.10.0")
local init = require("opcua.init")
local checkConfig = require("opcua.config")
local socket = require("socket")
local fmt = string.format

-- Connect logging traces
-- Logging level is controlled by config file.
ua.trace.dbg = function(msg)
  trace(msg)
end

ua.trace.inf = function(msg)
  trace(msg)
end

ua.trace.err = function(msg)
  trace(msg)
end

local traceD = ua.trace.dbg
local traceI = ua.trace.inf
local traceE = ua.trace.err

local function getHostName()
  local hostname
  if os and os.execute and os.execute() then
    local f = _G.io.popen("hostname")
    hostname = f:read("*a")
  else
    local sock = socket.connect("google.com", 80)
    local _,_,ips = string.find(sock:sockname(), "(%d+.%d+.%d+.%d+)")
    hostname = ips
  end

  hostname = string.gsub(hostname, "[\n\r]", "")
  return hostname
end

local function getDefaultCert(fileName)
  traceI("Use embedded OPCUA certificates")
  local keyPath = "."..fileName..".key"
  local certPath = "."..fileName..".pem"
  return certPath, keyPath, _ENV.app.io
end

local function writeFile(fio, fileName, data)
  local f, err = fio:open(fileName, "w")
  if err then
    traceI(fmt("Failed to create file '%s': ", err))
    return false
  end

  local result = f:write(data)
  if not result then
    traceI(fmt("Failed to save file '%s'." , fileName))
    return getDefaultCert(fileName)
  end

  f:close()

  return true
end

local function genOPCUACert(certIo, genFunc, hostname, applicationUri, fileName)
  traceI("Loading OPCUA certificate")
  local keyName = fileName..".key"
  local certName = fileName..".pem"
  local keyHandle = certIo:open(keyName)
  local certHandle = certIo:open(certName)
  if not keyHandle or not certHandle then
    traceI("Generating new OPCUA certificate")
    local cert, key = genFunc(hostname, applicationUri)
    if not writeFile(certIo, certName, cert) then
      traceI("failed to save cert: return default OPCUA certificate")
      return getDefaultCert(fileName)
    end
    if not writeFile(certIo, keyName, key)then
      traceI("failed to save private key: return default OPCUA certificate")
      return getDefaultCert(fileName)
    end
  end

  certName, keyName = certIo:realpath(certName), certIo:realpath(keyName)
  traceI(fmt("return default OPCUA certificate: '%s', '%s'", certName, keyName))
  return certName, keyName
end

local hostname = getHostName()
-- ua.debug()

local clientConfig
local certIo

-- Try to load mako configuration file (Xedge32 has no 'localconf' module)
local suc, makoConf = pcall(require, "loadconf")
if suc then
  traceI("Loaded mako.conf")
  certIo = ba.openio("home")
  if not certIo:stat("cert") and not certIo:mkdir("cert") then
    traceE("Cannot create directory "..certIo:realpath("cert"))
  end

  local cio = ba.mkio(certIo, "cert")

  -- Save certificates to the cert directory on local machine
  -- for future reuse
  if makoConf.uaClient then
    traceI("Loading OPCUA client config 'mako.conf'")
    clientConfig = makoConf.uaClient
    clientConfig.io = _G.io
    clientConfig.certificate, clientConfig.key =
      genOPCUACert(cio, init.genClientCertificate, hostname, clientConfig.applicationUri, "opcua_client")
  end
end

-- If mako configuration file not found then load configuration from
-- files embedded in the application
if clientConfig == nil then
  traceI("Loading OPCUA client config from file '.opcua_client_config'")
  clientConfig = _ENV.app.io:dofile(".opcua_client_config", _ENV)
end

if not clientConfig then
  error("Cannot load OPCUA client configuration")
end

checkConfig.client(clientConfig)
_G.clientConfig = clientConfig

traceI("OPCUA browser ready")
