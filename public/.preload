trace("Initializing OPCUA")
local ua = require("opcua.api")
local init = require("opcua.init")

local checkConfig = require("opcua.config")
local sock = require("socket")
local gettime=os.time

local function getHostName()
  local hostname
  if os.execute() then
    local f = _G.io.popen("hostname")
    hostname = f:read("*a")
  else
    local sock = sock.connect("google.com", 80)
    hostname = sock:peername()
  end

  hostname = string.gsub(hostname, "[\n\r]", "")
  return hostname
end

local function genOPCUACert(genFunc, hostname, applicationUri, fileName)
  local keyPath = "."..fileName..".key"
  local certPath = "."..fileName..".pem"
  local diskIO = ba.openio("disk")
  if not diskIO then
    return certPath, keyPath, _ENV.app.io
  end

  local homePath = os.getenv("HOME") or os.getenv("USERPROFILE")
  local certsRoot
  if string.sub(homePath, 1, 1) == '/' then
    certsRoot = homePath.."/.mako"
    keyPath = string.format("%s/%s.key", certsRoot, fileName)
    certPath = string.format("%s/%s.pem", certsRoot, fileName)
  else
    certsRoot = "\\"..homePath.."\\.mako"
    certsRoot = string.gsub(certsRoot, "\\", "/")
    certsRoot = string.gsub(certsRoot, ":", "")

    keyPath = string.format("%s\\%s.key", certsRoot, fileName)
    keyPath = string.gsub(keyPath, "\\", "/")

    certPath = string.format("%s\\%s.pem", certsRoot, fileName)
    certPath = string.gsub(certPath, "\\", "/")
  end

  local err = diskIO:mkdir(certsRoot)

  if diskIO:open(keyPath) and diskIO:open(certPath) then
    return certPath, keyPath, diskIO
  end

  local cert, key = genFunc(hostname, applicationUri, "urn:opcua.com:opcua:client")

  local f, err = diskIO:open(certPath, "w")
  local result = f:write(cert)
  f:close()

  f, err = diskIO:open(keyPath, "w")
  result = f:write(key)
  f:close()

  if not result then
    trace("Failed to create OPCUA certificates. Error: "..result2)
    keyPath = "."..fileName..".key"
    certPath = "."..fileName..".pem"
    trace("Use embedded OPCUA certificates")
    return certPath, keyPath, _ENV.app.io
  end

  return certPath, keyPath, diskIO
end

-- Connect logging traces
-- Logging level is controlled by config file.
ua.trace.dbg = function(msg)
  tracep(false, 10, msg)
end

ua.trace.inf = function(msg)
  tracep(false, 9, msg)
end

ua.trace.err = function(msg)
  tracep(false, 0, msg)
end

local hostname = getHostName()

trace("Create OPCUA client")
-- Load and check client configuration file
local clientConfig = _ENV.app.io:dofile(".opcua_client_config", _ENV)
local certPath, keyPath, certIo = genOPCUACert(init.genClientCertificate, hostname, clientConfig.applicationUri, "opcua_client")
clientConfig.certificate = certPath
clientConfig.key = keyPath
clientConfig.io = certIo

checkConfig.client(clientConfig)
_G.clientConfig = clientConfig

trace("Start OPCUA server")
local serverConfig = require("loadconf").opc
if not serverConfig then
  serverConfig = _ENV.app.io:dofile(".opcua_server_config", _ENV)
end

local certPath, keyPath, certIo = genOPCUACert(init.genServerCertificate, hostname, serverConfig.applicationUri, "opcua_server")
serverConfig.endpointUrl = string.format("opc.tcp://%s:%d", hostname, serverConfig.listenPort)
serverConfig.certificate = certPath
serverConfig.key = keyPath
serverConfig.io = certIo
checkConfig.server(serverConfig)

local ok
ok, uaServer = pcall(ua.newServer, serverConfig)
if not ok then
   trace("Error: server too old for OPCUA example: "..uaServer)
   return
end

local function demoAddon(services)
  local objects = "i=40"
  io:dofile(".add_variables.lua")(services, objects)
end

uaServer:initialize(demoAddon)
uaServer:run()

function onunload()
  trace("Stopping OPC-UA server")
  uaServer:shutdown()
end

_G.uaServices = uaServer.services

trace("OPCUA ready")

local function waitForDebugger()

   -- Load the Lua Debug Monitor "ldbgmon" and call the connect() method
   -- client=false -> bind (act as server). Default is to act as client.
   if require"ldbgmon".connect{client=false} then
      trace"The debugger should stop the program on this line"
      -- Hit F5 to continue
   else
      trace"Debugger connection failed"
   end

end -- waitForDebugger

--waitForDebugger()
