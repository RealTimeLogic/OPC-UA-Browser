return {
  -- Application name
  applicationName="RealTimeLogic OPCUA Server",

  -- Application URI should be equal to
  -- URI subject alternative name extention in the certificate
  applicationUri="urn:RealTimeLogic:opcua:server",

  endpoints = {
    {
      -- endpoint URL will be sent to clients.
      endpointUrl = "opc.tcp://",

      -- The port will server be listen to
      -- optional. Will be taken from endpointUrl if absent.
      listenPort = 4841,

      -- The host name will server be bind to
      -- optional. Will be taken from endpointUrl if absent.
      listenAddress="*",
    },
    {
      -- endpoint URL will be sent to clients.
      endpointUrl = "opc.http://"
    },
    {
      -- endpoint URL will be sent to clients.
      endpointUrl = "opc.https://"
    }
  },

  httpDirName = "opcua",

  -- Size of buffer is allocated for one chunk.
  -- Minimum size 8192.
  bufSize = 65536,

  securePolicies = {
    -- Secure policy "None" provides no security at all.
    -- if you need some security then remove this element from array
    { -- #1
      securityPolicyUri = "http://opcfoundation.org/UA/SecurityPolicy#None", -- ua.Types.SecurityPolicy.None
    },
    -- secure policy Basic128Rsa15 can have key length 1024 or 2048 bits length
    -- deprecated in the OPC-UA standard.
    { -- #2
      securityPolicyUri = "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15", -- ua.Types.SecurityPolicy.Basic128Rsa15
      securityMode = {
        2, -- ua.Types.MessageSecurityMode.Sign
        3, -- ua.Types.MessageSecurityMode.SignAndEncrypt
      },
    },
    { -- #3
      securityPolicyUri = "http://opcfoundation.org/UA/SecurityPolicy#Aes128_Sha256_RsaOaep",
      securityMode = {2, 3}, -- Sign + SignAndEncrypt,
    },
    { -- #4
      securityPolicyUri = "http://opcfoundation.org/UA/SecurityPolicy#Basic256Sha256",
      securityMode = {2, 3}, -- Sign + SignAndEncrypt,
    },
  },

  userIdentityTokens = {
    {
      policyId = "anonymous",
      tokenType = 0, -- ua.Types.UserTokenType.Anonymous
      issuedTokenType = nil,
      issuerEndpointUrl = nil,
      securityPolicyUri = nil
    },
    {
      policyId = "username_Basic128Rsa15",
      tokenType = 1, -- ua.Types.UserTokenType.UserName
      issuedTokenType = nil,
      issuerEndpointUrl = nil,
      securityPolicyUri = "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15" -- ua.Types.SecurityPolicy.Basic128Rsa15
    },
    {
      policyId = "x509",
      tokenType = 2, -- ua.Types.UserTokenType.Certificate
      issuedTokenType = nil,
      issuerEndpointUrl = nil,
      -- securityPolicyUri = "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15" -- ua.Types.SecurityPolicy.Basic128Rsa15
    }
  },

  logging = {
    socket = {
      dbgOn = false,  -- debug logs of socket
      infOn = true,  -- information logs about sockets
      errOn = true,  -- Errors on sockets
    },
    binary = {
      dbgOn = false,  -- Debugging traces about binary protocol. Print encoded message hex data.
      infOn = true,  -- Information traces about binary protocol
      errOn = true,  -- Errors in binary protocol
    },
    services = {
      dbgOn = false,  -- Debugging traces about UA services work
      infOn = true,  -- Informations traces
      errOn = true,  -- Errors
    }
  }
}
